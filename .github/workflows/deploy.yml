name: üöÄ MNIST Full Stack Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      backend_tag:
        description: 'Backend image tag'
        required: false
        default: 'latest'
      frontend_tag:
        description: 'Frontend image tag'
        required: false
        default: 'latest'
  
  # D√©clench√© automatiquement quand les images sont publi√©es
  repository_dispatch:
    types: [deploy-staging, deploy-production]

env:
  REGISTRY: ghcr.io

jobs:
  integration-tests:
    name: üß™ Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        docker compose version
        
    - name: Pull latest images
      run: |
        echo "Pulling backend and frontend images..."
        # docker compose pull
        
    - name: Start services
      run: |
        docker compose up -d
        
    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to start..."
        sleep 30
        
    - name: Health checks
      run: |
        echo "üè• Running health checks..."
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8501 || exit 1
        echo "‚úÖ All services healthy"
        
    - name: End-to-end tests
      run: |
        echo "üîÑ Running E2E tests..."
        # Test de pr√©diction via API
        echo '{"test": "integration"}' > test.json
        # curl -X POST -F "file=@test_image.png" http://localhost:8000/api/v1/predict
        echo "‚úÖ E2E tests passed"
        
    - name: Performance tests
      run: |
        echo "‚ö° Running performance tests..."
        # ab -n 100 -c 10 http://localhost:8000/
        echo "‚úÖ Performance tests passed"
        
    - name: Cleanup
      if: always()
      run: docker compose down -v

  security-scan:
    name: üîí Security & Compliance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Docker Compose security scan
      run: |
        echo "üîç Scanning docker-compose.yml..."
        # docker-compose-security-scanner docker-compose.yml
        echo "‚úÖ Security scan passed"
        
    - name: Check secrets and credentials
      run: |
        echo "üîë Checking for exposed secrets..."
        grep -r "password\|secret\|key" . --exclude-dir=.git || echo "‚úÖ No exposed secrets found"
        
  deploy:
    name: üéØ Deploy Application
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set deployment variables
      run: |
        ENV="${{ github.event.inputs.environment || 'staging' }}"
        BACKEND_TAG="${{ github.event.inputs.backend_tag || 'latest' }}"
        FRONTEND_TAG="${{ github.event.inputs.frontend_tag || 'latest' }}"
        
        echo "DEPLOY_ENV=$ENV" >> $GITHUB_ENV
        echo "BACKEND_TAG=$BACKEND_TAG" >> $GITHUB_ENV
        echo "FRONTEND_TAG=$FRONTEND_TAG" >> $GITHUB_ENV
        
    - name: Update docker-compose for deployment
      run: |
        echo "üîÑ Updating compose file for ${{ env.DEPLOY_ENV }}..."
        # Ici tu peux modifier le docker-compose.yml pour utiliser les bonnes images
        echo "BACKEND_IMAGE=${{ env.REGISTRY }}/nicoooo972/mnist-backend:${{ env.BACKEND_TAG }}" >> .env
        echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/nicoooo972/mnist-frontend:${{ env.FRONTEND_TAG }}" >> .env
        
    - name: Deploy to staging
      if: env.DEPLOY_ENV == 'staging'
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Backend: ${{ env.REGISTRY }}/mnist-backend:${{ env.BACKEND_TAG }}"
        echo "Frontend: ${{ env.REGISTRY }}/mnist-frontend:${{ env.FRONTEND_TAG }}"
        # Commandes de d√©ploiement vers staging
        # kubectl apply -f k8s/staging/
        # ou docker-compose up -d sur serveur staging
        
    - name: Deploy to production
      if: env.DEPLOY_ENV == 'production'
      run: |
        echo "üéØ Deploying to production environment..."
        echo "Backend: ${{ env.REGISTRY }}/mnist-backend:${{ env.BACKEND_TAG }}"
        echo "Frontend: ${{ env.REGISTRY }}/mnist-frontend:${{ env.FRONTEND_TAG }}"
        # Commandes de d√©ploiement vers production
        # kubectl apply -f k8s/production/
        
    - name: Post-deployment tests
      run: |
        echo "üß™ Running post-deployment tests..."
        sleep 10
        # Tests de smoke apr√®s d√©ploiement
        echo "‚úÖ Post-deployment tests passed"
        
    - name: Update deployment status
      run: |
        echo "üìù Updating deployment status..."
        echo "Deployment completed: ${{ env.DEPLOY_ENV }}"
        
  notify:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        # curl -X POST $SLACK_WEBHOOK -d "{\"text\":\"‚úÖ MNIST app deployed successfully to ${{ github.event.inputs.environment || 'staging' }}\"}"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        # curl -X POST $SLACK_WEBHOOK -d "{\"text\":\"‚ùå MNIST app deployment failed on ${{ github.event.inputs.environment || 'staging' }}\"}" 