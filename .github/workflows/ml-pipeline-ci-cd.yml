name: 🔄 ML Pipeline CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mnist-mlops
  PYTHON_VERSION: "3.11"

jobs:
  unit-tests:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, model-validation]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Checkout backend code
      uses: actions/checkout@v4
      with:
        repository: nicoooo972/mnist-backend
        path: backend
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run ${{ matrix.test-type }} tests
      run: |
        cd backend
        echo "🧪 Running ${{ matrix.test-type }} tests..."
        if [ "${{ matrix.test-type }}" == "unit" ]; then
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        elif [ "${{ matrix.test-type }}" == "integration" ]; then
          pytest tests/integration/ -v --timeout=300
        elif [ "${{ matrix.test-type }}" == "model-validation" ]; then
          pytest tests/model_validation/ -v --timeout=600
        fi
        
    - name: Upload coverage reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          htmlcov/
          test-results.xml

  build-containers:
    name: 🐳 Build & Push Containers
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push training container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.training
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push serving container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.serving
        push: true
        tags: ${{ steps.meta.outputs.tags }}-serving
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-containers
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Mise à jour des images dans docker-compose.staging.yml
        sed -i "s|image: .*mnist.*|image: ${{ needs.build-containers.outputs.image-tag }}|g" docker-compose.staging.yml
        
    - name: Run staging tests
      run: |
        echo "🧪 Running staging integration tests..."
        docker-compose -f docker-compose.staging.yml up -d
        sleep 30
        # Tests d'intégration en staging
        curl -f http://localhost:8080/health || exit 1
        docker-compose -f docker-compose.staging.yml down
        
    - name: Staging deployment summary
      run: |
        echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build-containers.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY

  performance-benchmark:
    name: 📊 Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-containers
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Checkout backend code
      uses: actions/checkout@v4
      with:
        repository: nicoooo972/mnist-backend
        path: backend
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run performance benchmarks
      run: |
        cd backend
        echo "📊 Running performance benchmarks..."
        python scripts/benchmark_model.py --image ${{ needs.build-containers.outputs.image-tag }}
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark
        path: benchmark-results.json

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-containers, deploy-staging, performance-benchmark]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Blue-Green deployment preparation
      run: |
        echo "🔄 Preparing blue-green deployment..."
        # Préparer le déploiement blue-green
        
    - name: Deploy to production (Blue-Green)
      run: |
        echo "🌟 Deploying to production with blue-green strategy..."
        # Déploiement blue-green en production
        sed -i "s|image: .*mnist.*|image: ${{ needs.build-containers.outputs.image-tag }}|g" docker-compose.production.yml
        
    - name: Run production smoke tests
      run: |
        echo "💨 Running production smoke tests..."
        # Tests de fumée en production
        
    - name: Production deployment summary
      run: |
        echo "## 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build-containers.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy**: Blue-Green" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "🎉 Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "🚀 Staging deployment successful!"
        else
          echo "❌ Deployment failed"
        fi 

  deploy-to-vertex-ai:
    name: "🚀 Deploy to Vertex AI"
    runs-on: ubuntu-latest
    needs: build-containers
    if: github.ref == 'refs/heads/main'
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: "Deploy Vertex AI Custom Job"
        run: |
          gcloud ai custom-jobs create \
            --region=europe-west1 \
            --display-name=mnist-training-$(date +%Y%m%d_%H%M%S) \
            --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=${{ needs.build-containers.outputs.image-tag }} \
            --project=${{ secrets.GCP_PROJECT_ID }}